import random

#Should only be called on demand and not added to the SF as a default target file
rule generateTestSet:
    output:
        testSet = 'data/output/testSet.txt',
        evalSet = 'data/output/evaluationSet.txt'
    run:
        samples = []
        for run in runs:
            for barcode in barcodes[run]:
                samples.append((run,barcode))
        test = random.sample(samples,k=30)
        eval = set(samples)-set(test)
        with open(output['testSet'],'w') as testSet, open(output['evalSet'],'w') as evalSet:
            for t in test:
                testSet.write('{}\t{}\n'.format(t[0],t[1]))
            for e in eval:
                evalSet.write('{}\t{}\n'.format(e[0],e[1]))


rule combineWithReference_pancov:
    input:
        reference = "data/input/nCoV-2019.reference.fasta",
        consensus = "data/output/consensus/medaka/{run}/{barcode}/consensus.fasta"
    output:
        combined = "data/auxiliary/evaluation/consensusVariantExtraction/pancov/{run}_{barcode}.cmb"
    shell:
        'cat {input.reference} {input.consensus} > {output.combined}'

rule combineWithReference_meda:
    input:
        reference = "data/input/nCoV-2019.reference.fasta",
        consensus = "data/input/{run}/barcode{barcode}.medaka.consensus.fasta"
    output:
        combined = "data/auxiliary/evaluation/consensusVariantExtraction/medaka/{run}_{barcode}.cmb"
    shell:
        'cat {input.reference} {input.consensus} > {output.combined}'
        
rule combineWithReference_nano:
    input:
        reference = "data/input/nCoV-2019.reference.fasta",
        consensus = "data/input/{run}/barcode{barcode}.nanopolish.consensus.fasta"
    output:
        combined = "data/auxiliary/evaluation/consensusVariantExtraction/nanopolish/{run}_{barcode}.cmb"
    shell:
        'cat {input.reference} {input.consensus} > {output.combined}'
        
rule combineWithReference_illumina:
    input:
        reference = "data/input/nCoV-2019.reference.fasta",
        consensus = "data/auxiliary/consensus/illumina/{run}/{barcode}/consensus.fa"
    output:
        combined = "data/auxiliary/evaluation/consensusVariantExtraction/illumina/{run}_{barcode}.cmb"
    shell:
        'cat {input.reference} {input.consensus} > {output.combined}'

rule combineWithReference_gisaid:
    input:
        reference = "data/input/nCoV-2019.reference.fasta",
        consensus = lambda wildcards : "data/input/gisaidseqs/Germany_NW-HHU-"+getGisaidFile(wildcards.run,wildcards.barcode)+".fasta"
    output:
        combined = "data/auxiliary/evaluation/consensusVariantExtraction/gisaid/{run}_{barcode}.cmb"
    shell:
        'cat {input.reference} {input.consensus} > {output.combined}'

rule muscle:
    input:
        "data/auxiliary/evaluation/consensusVariantExtraction/{method}/{run}_{barcode}.cmb"
    output:
        "data/auxiliary/evaluation/consensusVariantExtraction/{method}/{run}_{barcode}.aln"
    conda:
        "../envs/muscle.yaml"
    shell:
        'muscle -in {input} -clwout {output}'


rule createInfoFile:
    input:
        alignment = "data/auxiliary/evaluation/consensusVariantExtraction/{method}/{run}_{barcode}.aln"
    output:
        info = "data/auxiliary/evaluation/consensusVariantExtraction/{method}/{run}_{barcode}.info"
    script:
        '../scripts/consensusToTable.py'

def getAllComparisonFiles(wildcards):
    allFiles = []
    for run in runs:
        for barcode in barcodes[run]:
        
            #check for missing gisaid files
            if wildcards.method == 'gisaid':
                if run in gisaidMapping and barcode in gisaidMapping[run]:
                    pass
                else:
                    #print('skipping run {} barcode {} for gisaid comparison as we have no seq yet ...'.format(run,barcode))
                    continue
                    
            #check for missing illumina files
            if wildcards.method == 'illumina':
                if run in illuminaMapping and barcode in illuminaMapping[run]:
                    pass
                else:
                    #print('skipping run {} barcode {} for illumina comparison as we have no seq yet ...'.format(run,barcode))
                    continue
                    
            allFiles += [
                "data/auxiliary/evaluation/consensusVariantExtraction/pancov/"+run+"_"+barcode+".info",
                "data/auxiliary/evaluation/consensusVariantExtraction/{method}/"+run+"_"+barcode+".info",
                'data/auxiliary/pileupAnalysis/medaka/' + run + '/' + barcode + '.pileupanalysis.txt'
            ]
    return allFiles

rule assembleMedians:
    input:
        fetchAllPileups()
    output:
        'data/auxiliary/pileupAnalysis/medians.json'
    script:
        '../scripts/assembleMedians.py'

rule comparePancovToX:
    input:
        iteratorList = getAllComparisonFiles,
        medians = 'data/auxiliary/pileupAnalysis/medians.json',
        reference = "data/input/nCoV-2019.reference.fasta"
    output:
        'data/output/evaluation/comparisonFastaBased/{method}.eval'
    conda:
        "../envs/biopythonworkbench.yaml"
    script:
        '../scripts/variantdiff_summary.py'


def getAllPancovVCFs():
    allFiles = []
    for run in runs:
        for barcode in barcodes[run]:
            #check for missing illumina files
            if run in illuminaMapping and barcode in illuminaMapping[run]:
                pass
            else:
                #print('skipping run {} barcode {} for illumina comparison as we have no seq yet ...'.format(run,barcode))
                continue
            allFiles += [
                "data/output/consensus/medaka/" + run + "/" + barcode + "/variant.vcf"
            ]
    return allFiles
    
def getAllIVarTables():
    allFiles = []
    for run in runs:
        for barcode in barcodes[run]:
            #check for missing illumina files
            if run in illuminaMapping and barcode in illuminaMapping[run]:
                pass
            else:
                #print('skipping run {} barcode {} for illumina comparison as we have no seq yet ...'.format(run,barcode))
                continue
            allFiles += [
                'data/auxiliary/illuminaVarCalls/'+run+'_'+barcode+'/ivar.vcf.tsv'
            ]
    return allFiles

def getAllNanoporeVCFs():
    allFiles = []
    for run in runs:
        for barcode in barcodes[run]:
            #check for missing illumina files
            if run in illuminaMapping and barcode in illuminaMapping[run]:
                pass
            else:
                #print('skipping run {} barcode {} for illumina comparison as we have no seq yet ...'.format(run,barcode))
                continue
            allFiles += [
                'data/input/'+run+'/'+'barcode'+barcode+'.nanopolish.pass.vcf'
            ]
    return allFiles

def getAllIlluminaPileups():
    allFiles = []
    for run in runs:
        for barcode in barcodes[run]:
            #check for missing illumina files
            if run in illuminaMapping and barcode in illuminaMapping[run]:
                pass
            else:
                #print('skipping run {} barcode {} for illumina comparison as we have no seq yet ...'.format(run,barcode))
                continue
            allFiles += [
                'data/auxiliary/pileupAnalysis/illumina/'+run+'/'+barcode+'.pileupanalysis.txt'
            ]
    return allFiles

rule evaluateHeterozygosityVisual:
    input:
        pancov = getAllPancovVCFs(),
        illuminaPileups = getAllIlluminaPileups(),
        nanopore = getAllNanoporeVCFs(),
        ivar = getAllIVarTables()
    output:
        hetfolder = directory('data/output/evaluation/heterozygosity'),
        overview = 'data/output/evaluation/heterozygosity.html',
        resume = 'data/output/evaluation/heterozygosity.csv',
    conda:
        '../envs/altair.yaml'
    script:
        '../scripts/hetPlot1.py'
