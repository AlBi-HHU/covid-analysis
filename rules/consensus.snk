
#TODO: Handle multiple conflicting records (e.g. REF C two vars with ALT T and ALT G respectively at 40%)
rule decideFinalVCF:
    input:
        vcf = "data/auxiliary/pangenome_vc/{method}/{run}/{barcode}/filter.vcf",
        pileup = 'data/auxiliary/pileupAnalysis/{method}/{run}/{barcode}.pileupanalysis.txt'
    output:
        vcf = "data/output/consensus/{method}/{run}/{barcode}/variant.vcf"
    log:
        'logs/decideFinalVCF_{method}_{run}_{barcode}.txt'
    conda:
        '../envs/vcfpy.yaml'
    params:
        th_sbiais = config["consensusStrandBiais"],
        th_cov = config["consensusMinCov"],
        th_sb_cov = config['consensusPValCoverage'],
        th_sb_pval = config['consensusPValCutoff'],
        th_het = config["thresholdHomCall"]
    script:
            '../scripts/consensusVCF.py'


rule sort_vcf_consensus:
    input:
        "data/output/consensus/{method}/{run}/{barcode}/variant.vcf"
    output:
        "data/auxiliary/consensus/{method}/{run}/{barcode}/variant.sorted.vcf"
    conda:
        '../envs/vt.yaml'
    shell:
        'vt sort -w 10000 {input} -o {output}'

rule compress_vcf:
    input:
        vcf = "data/auxiliary/consensus/{method}/{run}/{barcode}/variant.sorted.vcf"

    output:
        gvcf = "data/auxiliary/consensus/{method}/{run}/{barcode}/variant.vcf.gz"

    conda:
        '../envs/realign.yaml'

    shell:
        'bgzip -c {input.vcf} > {output.gvcf}'


rule index_vcf:
    input:
        vcf = "data/auxiliary/consensus/{method}/{run}/{barcode}/variant.vcf.gz"

    output:
        index = "data/auxiliary/consensus/{method}/{run}/{barcode}/variant.vcf.gz.csi"

    conda:
        '../envs/realign.yaml'

    shell:
        'bcftools index {input.vcf}'


rule apply_vcf:
    input:
        ref = "data/input/nCoV-2019.reference.fasta",
        vcf = "data/auxiliary/consensus/{method}/{run}/{barcode}/variant.vcf.gz",
        index = "data/auxiliary/consensus/{method}/{run}/{barcode}/variant.vcf.gz.csi"

    output:
        var_ref = "data/output/consensus/{method}/{run}/{barcode}/consensus.fasta"

    conda:
        '../envs/realign.yaml'

    shell:
        'bcftools consensus -f {input.ref} {input.vcf} > {output.var_ref}'

'''
rule map_on_consensus:
    input:
        new_ref = "data/auxiliary/consensus/{method}/{run}/{barcode}/variant_applied.fasta",
        index = "data/auxiliary/consensus/{method}/{run}/{barcode}/variant_applied.fasta.bwt",
        raw_reads = "data/auxiliary/softClippedSeqs/{method}/{run}/{barcode}.fasta"

    output:
        mapping = 'data/auxiliary/consensus/{method}/{run}/{barcode}/mapping.bam'
        
    threads:
        48
        
    conda:
        '../envs/realign.yaml'

    shell:
        'bwa mem -t {threads} {input.new_ref} {input.raw_reads} | samtools sort - > {output.mapping} && samtools index {output.mapping}'
'''


