def getAllIlluminaFiles(type,wildcards):
    allFiles = []
    for run in runs:
        for barcode in barcodes[run]:


            if run in illuminaMapping and barcode in illuminaMapping[run]:
                pass
            else:
                print('skipping run {} barcode {} for illumina comparison as we have no seq yet ...'.format(run,
                                                                                                            barcode))
                continue

            allFiles += [
                'data/auxiliary/evaluation/illumina/'+run+'_'+barcode+'_'+wildcards.method+'.'+type+'.txt'
            ]
    return allFiles

rule illuminaPileup:
    input:
        alignment = 'data/input/illumina/{run}_{barcode}/alignment.bam',
        index = 'data/input/illumina/{run}_{barcode}/alignment.bam.bai',
        reference = 'data/input/nCoV-2019.reference.fasta'
    output:
        'data/auxiliary/pileupAnalysis/illumina/{run}/{barcode}.pileupanalysis.txt'
    params:
        # Cluster Execution
        cpus = '1',
        mem = '8G',
        gpus = '0',
        walltime = '00:05:00'
    conda:
        '../envs/biopythonworkbench.yaml'
    shell:
        'perl scripts/getCompleteMycoFrequencies.pl --BAM {input.alignment} --output {output} --minMappingQuality 0 --minBaseQuality 0 --referenceGenome {input.reference}'

rule illuminaVerify:
    input:
        pancovInfo = "data/auxiliary/evaluation/consensusVariantExtraction/{method}/{run}_{barcode}.info",
        illuminaPileup = 'data/auxiliary/pileupAnalysis/illumina/{run}/{barcode}.pileupanalysis.txt'
    output:
        diffFile = 'data/auxiliary/evaluation/illumina/{run}_{barcode}_{method}.verification.txt'
    script:
        '../scripts/illuminadiff.py'

rule illuminaRecover:
    input:
        pancovInfo = "data/auxiliary/evaluation/consensusVariantExtraction/{method}/{run}_{barcode}.info",
        iVarInfo = "data/auxiliary/evaluation/consensusVariantExtraction/illumina/{run}_{barcode}.info",
        illuminaPileup = 'data/auxiliary/pileupAnalysis/illumina/{run}/{barcode}.pileupanalysis.txt'
    output:
        diffFile = 'data/auxiliary/evaluation/illumina/{run}_{barcode}_{method}.recovery.txt'
    script:
        '../scripts/illuminadiff2.py'

rule aggregateVerification:
    input:
        iteratorList = lambda wildcards : getAllIlluminaFiles('verification',wildcards)
    output:
        'data/output/evaluation/illumina_verification_{method}.eval'
    script:
        '../scripts/aggregateVerifications.py'

rule ivar_var:
    input:
        alignment = 'data/input/illumina/{run}_{barcode}/downsampledAlignment.bam',
        reference = "data/input/nCoV-2019.reference.fasta",
    output:
        'data/auxiliary/illuminaVarCalls/{run}_{barcode}/ivar.vcf.tsv'
    params:
        prefix = 'data/auxiliary/illuminaVarCalls/{run}_{barcode}/ivar.vcf',
        iac = config['illuminaAlleleFreqCutoff']
    conda:
        '../envs/ivar.yaml'
    shell:
        'samtools mpileup -aa -A -d 0 -B -Q 0 --reference {input.reference} {input.alignment} | ivar variants -t {params.iac} -m 20 -r {input.reference} {input.alignment} -p {params.prefix}'
        
                
rule ivar_consensus:
    input:
        alignment = 'data/input/illumina/{run}_{barcode}/downsampledAlignment.bam',
        reference = "data/input/nCoV-2019.reference.fasta"
    output:
        "data/auxiliary/consensus/illumina/{run}/{barcode}/consensus.fa"
    params:
        prefix = "data/auxiliary/consensus/illumina/{run}/{barcode}/consensus",
        iac = config['illuminaAlleleFreqCutoff']
    conda:
        '../envs/ivar.yaml'
    shell:
        'samtools mpileup -aa -A -d 0 -B -Q 0 --reference {input.reference} {input.alignment} | ivar consensus -t {params.iac} -m 20 {input.alignment} -p {params.prefix}'
