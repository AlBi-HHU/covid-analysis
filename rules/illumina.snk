import os

rule illuminaPileup:
    input:
        alignment = 'data/input/illumina/{run}_{barcode}/alignment.bam',
        index = 'data/input/illumina/{run}_{barcode}/alignment.bam.bai',
        reference = 'data/input/nCoV-2019.reference.fasta'
    output:
        'data/auxiliary/pileupAnalysis/illumina/{run}/{barcode}.pileupanalysis.txt'
    params:
        # Cluster Execution
        cpus = '1',
        mem = '8G',
        gpus = '0',
        walltime = '00:05:00'
    conda:
        '../envs/biopythonworkbench.yaml'
    shell:
        'perl scripts/getCompleteMycoFrequencies.pl --BAM {input.alignment} --output {output} --minMappingQuality 0 --minBaseQuality 0 --referenceGenome {input.reference}'



rule ivar_var:
    input:
        alignment = 'data/input/illumina/{run}_{barcode}/downsampledAlignment.bam',
        reference = "data/input/nCoV-2019.reference.fasta",
    output:
        'data/auxiliary/illuminaVarCalls/{run}_{barcode}/ivar.vcf.tsv'
    params:
        prefix = 'data/auxiliary/illuminaVarCalls/{run}_{barcode}/ivar.vcf',
        iac = 1-float(config['illuminaAlleleFreqCutoff'])
    conda:
        '../envs/ivar.yaml'
    shell:
        'samtools mpileup -aa -A -d 0 -B -Q 0 --reference {input.reference} {input.alignment} | ivar variants -t {params.iac} -m 20 -r {input.reference} {input.alignment} -p {params.prefix}'
        
                
rule ivar_consensus:
    input:
        alignment = 'data/input/illumina/{run}_{barcode}/downsampledAlignment.bam',
        reference = "data/input/nCoV-2019.reference.fasta"
    output:
        "data/auxiliary/consensus/illumina/{run}/{barcode}/consensus.fa"
    params:
        prefix = "data/auxiliary/consensus/illumina/{run}/{barcode}/consensus",
        iac = config['illuminaAlleleFreqCutoff']
    conda:
        '../envs/ivar.yaml'
    shell:
        'samtools mpileup -aa -A -d 0 -B -Q 0 --reference {input.reference} {input.alignment} | ivar consensus -t {params.iac} -m 20 {input.alignment} -p {params.prefix}'

def getAllConsensusIvar(wildcards):
    inputList = []
    for run in runs:
        for barcode in barcodes[run]:
            file = 'data/output/consensus/illumina/'+run+'/'+barcode+'/consensus.fa'
            if os.path.isfile(file):
                inputList.append(file)
    return inputList

def getAllConsensusIvarParams(wildcards):
    inputList = []
    for run in runs:
        for barcode in barcodes[run]:
            file = 'data/output/consensus/illumina/'+run+'/'+barcode+'/consensus.fa'
            if os.path.isfile(file):
                inputList.append(file+'<::>'+run+'<::>'+barcode)
    return inputList

### Consensus Aggregation for Pangolin
rule aggregateOneFileIllumina:
    input:
        getAllConsensusIvar
    output:
        'data/output/consensus/aggregated_ivar.fa'
    conda:
        '../envs/biopythonworkbench.yaml'
    params:
        input = lambda wc: getAllConsensusIvarParams
    script:
        '../scripts/consensus/aggregateConsensus.py'

rule addInformation:
    input:
        "data/auxiliary/consensus/illumina/{run}/{barcode}/consensus.fa"
    output:
        "data/output/consensus/illumina/{run}/{barcode}/consensus.fa"
    shell:
        "sed -r 's/Consensus_consensus_threshold_(.+)_quality_(.+)/{wildcards.run}:{wildcards.barcode}/g' {input} > {output}"


rule calculateAverageIlluminaCoveragePerPosition:
    input:
        getAllIlluminaPileups()
    output:
        'data/auxiliary/illumina/averageCovPerPosition.csv'
    conda:
        '../envs/altair.yaml'
    script:
        '../scripts/evaluation/calcAverageIlluCoverage.py'

