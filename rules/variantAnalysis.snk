rule getVariantPositions:
	input:
		vcfFiles = expand('data/input/result_hac/barcode{barcode}.{method}.primertrimmed.vcf',method=methods,barcode=barcodes)
	output:
		'data/auxiliary/interestingPositions.json'
	conda:
		'../envs/biopythonworkbench.yaml'
	script:
		'../scripts/determineVariantPositions.py'

rule pileupAnalysis:
	input:
		alignment = 'data/input/result_hac/barcode{barcode}.{method}.primertrimmed.sorted.bam',
		reference = 'data/input/nCoV-2019.reference.fasta'
	output:
		'data/auxiliary/pileupAnalysis/{method}/{barcode}.pileupanalysis.txt'
	conda:
		'../envs/biopythonworkbench.yaml'
	shell:
		'perl scripts/getCompleteMycoFrequencies.pl --BAM {input.alignment} --output {output} --minMappingQuality 0 --minBaseQuality 0 --referenceGenome {input.reference}'


rule labelAlleles:
	input:
		pileupAnalysis = 'data/auxiliary/pileupAnalysis/{method}/{barcode}.pileupanalysis.txt',
		vcfFile = 'data/input/result_hac/barcode{barcode}.{method}.primertrimmed.vcf'
	output:
		'data/auxiliary/pileupAnalysis/{method}/{barcode}.labels.json'
	conda:
		'../envs/biopythonworkbench.yaml'
	script:
		'../scripts/labelVariantCalls.py'

rule getHOMVariantPositions:
	input:	
		labels = expand('data/auxiliary/pileupAnalysis/{method}/{barcode}.labels.json',method=methods,barcode=barcodes)
	output:
		'data/auxiliary/interestingHOMPositions.json'
	conda:
		'../envs/biopythonworkbench.yaml'
	script:
		'../scripts/assembleHOMPositions.py'
